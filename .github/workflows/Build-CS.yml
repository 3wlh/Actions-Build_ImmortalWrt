name: Build-CS
on:
  workflow_dispatch:
    inputs:
      image:
        description: |
          选择 OpenWrt 镜像
        required: true
        default: "rockchip-armv8-openwrt"
        type: choice
        options:
          - rockchip-armv8-openwrt
          - x86-64-openwrt
          - armsr-armv8-openwrt
          
      version:
        description: |
          选择 OpenWrt 版本
        required: true
        default: "24.10.1"
        type: choice
        options:
          - 23.05.5
          - 24.10.1
          
      profile:
        description: |
          输入 软路由型号 可选值如下：
        required: true
        default: 'friendlyarm_nanopi-r6s'
        type: choice
        options:
          - friendlyarm_nanopi-r6s
          - xunlong_orangepi-5-plus
          
      rootfs_partsize:
        description: |
          设置软件包大小 单位(MB)
        required: true
        default: '1024'
        type: choice
        options:
          - 512
          - 1024
          - 2048
          - 4096
          
      docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: false
        type: boolean
        
      enable_pppoe:
        description: |
          是否使用PPPoE协议?
        required: true
        default: true
        type: boolean
        
      pppoe_account:
        description: |
          是否添加 宽带账号? (可留空)
        required: false
      pppoe_password:
        description: |
          是否添加 宽带密码? (可留空)
        required: false

env:
  PATH_CACHE: /tmp/.cache
  UPLOAD_BIN_DIR: true
  IMAGE: imagebuilder:${{ inputs.image }}-${{ inputs.version }}.tar
  SSH: false

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure environment variables
        run: |
          # ${{ steps.imagetag.outputs.hash }}
          # ${{ github.workspace }}/cache/dl
          # ${{ github.workspace }}/cache/packages
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "time=$(date "+%Y.%m.%d-%H%M%S")" >> $GITHUB_ENV
          if [[ "${{ inputs.image }}" =~ "x86-64" || "${{ inputs.image }}" =~ "armsr" ]]; then
            echo "profile=generic" >> $GITHUB_ENV
          else
            echo "profile=${{ inputs.profile }}" >> $GITHUB_ENV
          fi
          [[ "${{ inputs.docker }}" == "true" ]] && echo "docker=-Docker" >> $GITHUB_ENV
          [[ "${{ inputs.image }}" =~ "armv8"  ]] && echo "arch=armv8" >> $GITHUB_ENV
          [[ "${{ inputs.image }}" =~ "x86-64"  ]] && echo "arch=x86-64" >> $GITHUB_ENV
          echo "config=$(echo ${{ inputs.image }} | sed 's/-openwrt//' | sed 's/-armv8//')" >> $GITHUB_ENV
              
      - name: Setup Cache
        uses: actions/cache@main
        with:
          path: ${{ env.PATH_CACHE }}
          key: |
            ${{ env.PATH_CACHE }}/image
            ${{ env.PATH_CACHE }}/dl
            ${{ env.PATH_CACHE }}/packages
      
      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/diy_build/${{ env.arch }}/build.sh
        
      - name: cs
        run: |
          mkdir -p ${{ env.PATH_CACHE }}/image
          if [[ -f "${{ env.PATH_CACHE }}/image/${{ env.IMAGE }}" ]]; then
            docker load --input \
            ${{ env.PATH_CACHE }}/image/${{ env.IMAGE }}
          else
            docker pull immortalwrt/imagebuilder:${{ inputs.image }}-${{ inputs.version }}
            docker save --output \
            ${{ env.PATH_CACHE }}/image/${{ env.IMAGE }} \
            immortalwrt/imagebuilder:${{ inputs.image }}-${{ inputs.version }}
          fi
          mkdir -p ${{ env.PATH_CACHE }}/dl
          if [[ -f "${{ env.PATH_CACHE }}/dl/cs.txt" ]]; then
            echo "${{ env.PATH_CACHE }}/dl.....ok"
          else
            echo "on" >${{ env.PATH_CACHE }}/dl/cs.txt
            echo "${{ env.PATH_CACHE }}/dl.....on"
          fi
          mkdir -p ${{ env.PATH_CACHE }}/packages
          if [[ -f "${{ env.PATH_CACHE }}/packages/cs.txt" ]]; then
            echo "${{ env.PATH_CACHE }}/packages.....ok"
          else
            echo "on" >${{ env.PATH_CACHE }}/packages/cs.txt
            echo "${{ env.PATH_CACHE }}/dl.....on"
          fi
        
      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.building.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: GitHub-Actions_${{ env.config }}
          path: ${{ github.workspace }}/.cache
